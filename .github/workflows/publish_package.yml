name: Publish Python Package
on:
  push:
    branches:
      - develop
      - master

jobs:
  test-and-publish:
    name: Test and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for bump2version to work
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: 'pip'  # Added caching for faster builds

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the package in editable mode with dev dependencies
          pip install -e ".[dev]"

      - name: Run tests
        run: pytest

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version
        id: bump_step
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Current branch: $BRANCH"
          if [ "$BRANCH" = "develop" ]; then
            echo "Bumping patch version..."
            bump2version patch --allow-dirty
          elif [ "$BRANCH" = "master" ]; then
            echo "Bumping minor version..."
            bump2version minor --allow-dirty
          else
            echo "Not on develop or master â€” skipping version bump."
            exit 1
          fi
          # Extract new version for use in tag
          NEW_VERSION=$(grep "version = " pyproject.toml | cut -d'"' -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: python -m build

      - name: Create Release
        if: success() && steps.bump_step.outcome == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_step.outputs.new_version }}
          name: Release v${{ steps.bump_step.outputs.new_version }}
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: success() && github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
