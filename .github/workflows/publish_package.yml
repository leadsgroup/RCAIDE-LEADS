name: Bump and Publish

on:
  # Automatically triggers when pushing to develop or master
  push:
    branches:
      - develop
      - master

  # Allows manual dispatch with a choice of bump type
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Select the type of version bump."
        required: true
        default: "major"
        type: choice
        options:
          - "major"
          - "minor"
          - "patch"

jobs:
  bump-and-publish:
    if: ${{ !contains(github.event.head_commit.message, 'Bump version') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine Bump Type
        id: bump-version
        run: |
          # If this was triggered manually, use the chosen bump_type input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.bump_type }}" >> $GITHUB_OUTPUT
          else
            # Otherwise (push event), determine based on branch
            if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get Current Version
        id: current-version
        run: |
          version=$(grep '# version' version.md | cut -d ' ' -f3)
          echo "current_version=$version" >> $GITHUB_OUTPUT

      - name: Bump Version
        uses: FragileTech/bump-version@main
        with:
          current_version: ${{ steps.current-version.outputs.current_version }}
          files: version.md
          part: ${{ steps.bump-version.outputs.bump_type }}
          commit_name: "Your Company Bot"
          commit_email: "bot@your-company.com"
          login: "your-bot-login"
          token: ${{ secrets.BOT_TOKEN }}

      - name: Publish to PyPI (only on master)
        if: github.ref == 'refs/heads/master'
        run: |
          python -m pip install --upgrade build twine
          python -m build
          twine upload dist/* -u __token__ -p "${{ secrets.PYPI_PASSWORD }}"
