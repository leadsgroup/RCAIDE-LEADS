name: Release Workflow

on:
  push:
    branches:
      - develop
      - master

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Get Old Version
        id: get_version
        run: |
          # Look for a line like `version = "0.0.1"` in pyproject.toml
          old_version=$(grep '^version *= *' pyproject.toml | sed 's/version *= *"//; s/"//')
          echo "old_version=$old_version" >> "$GITHUB_ENV"

      - name: Bump Version
        id: bump_version
        run: |
          old_version="${{ env.old_version }}"
          IFS='.' read -r major minor patch <<< "$old_version"

          if [ "${{ github.ref_name }}" = "develop" ]; then
            # Bump the patch version
            patch=$((patch + 1))
          elif [ "${{ github.ref_name }}" = "master" ]; then
            # Bump the minor version, reset patch
            minor=$((minor + 1))
            patch=0
          fi

          new_version="$major.$minor.$patch"

          # Update the version in pyproject.toml
          sed -i "s/version = \"$old_version\"/version = \"$new_version\"/" pyproject.toml

          echo "new_version=$new_version" >> "$GITHUB_ENV"

      - name: Commit and Push Updated Version
        if: steps.bump_version.outcome == 'success'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pyproject.toml
          # Including [skip ci] avoids a loop in case you have other CI triggers
          git commit -m "Bump version to ${{ env.new_version }} [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: bump-version
    # Only run this job if the push/merge happened on the master branch
    if: github.ref_name == 'master'
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade build twine

      - name: Build Package
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
